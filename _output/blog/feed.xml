
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Francisco&#39;s Blog</title>
  <subtitle>My absolutely amazing blog</subtitle>
  <link href="https://jfranciscosousa.com/blog/feed.xml" rel="self" />
  <link href="https://jfranciscosousa.com/" />
  <updated>2020-09-29T23:00:00+01:00</updated>
  <id>https://jfranciscosousa.com/</id>
  <author>
    <name>Francisco Sousa</name>
    <email>francisco.sousa@hey.com</email>
  </author> 
  <entry>
    <title>A primer on the JAMstack</title>
    <link href="https://jfranciscosousa.com/blog/posts/a-primer-on-the-jamstack/" />
    <updated>2020-01-10T00:00:00+00:00</updated>
    <id>https://jfranciscosousa.com/blog/posts/a-primer-on-the-jamstack/</id>
    <content type="html">
      &lt;p&gt;&lt;em&gt;Originally posted &lt;a href=&quot;https://auroradigital.co/blog/articles/a-primer-on-the-jamstack&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt; on my previous, but very nice, company &lt;a href=&quot;https://auroradigital.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Aurora Digital&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our own &lt;a href=&quot;https://auroradigital.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website&lt;/a&gt; is a product of the JAMstack. Perhaps you have heard of it if you are a web developer, and if you are not, then this will probably remind you of that jam that your aunt gave you and you never even tasted it and how it&#39;s probably full of mold right now. Nevertheless, the JAMstack is not another boring tech-specific stack. It&#39;s a change of paradigm. A shift in how we develop web apps and websites.&lt;/p&gt;
&lt;h2&gt;The usual web&lt;/h2&gt;
&lt;p&gt;Websites can be developed in all sorts of ways, but most are made by stitching together some HTML, JS, and CSS (the usual web stuff for those of you without a technical background). You drop a bunch of these files on a web server, and now everything is available on the web. Most times you need some way of representing dynamic content, a web page where the structure is the same but only the content changes. A website for a news agency perhaps will need to have a web page for each news article, something like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;www.awewsomenews.com/news/old-man-wins-the-lottery&lt;/p&gt;
&lt;p&gt;(that&#39;s not a real URL by the way)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Usually, web servers have custom code to handle this, either written by a developer or enabled by some CMS, like Wordpress for example. When a user visits that URL, the webserver code takes the &lt;strong&gt;old-man-wins-the-lottery&lt;/strong&gt; part of the URL, uses that to fetch the specific news article record, which is usually stored on a database, and builds an HTML page with that.&lt;/p&gt;
&lt;p&gt;There, I just told you how most websites work.&lt;/p&gt;
&lt;p&gt;This is perfectly fine, however, there are some underlying issues here. Using traditional web servers to serve your websites is usually a bad idea, at least if you do it yourself. The major issue is performance. If you are serving hundreds of thousands of web pages per second, one web server won&#39;t be enough.&lt;/p&gt;
&lt;h2&gt;The new way&lt;/h2&gt;
&lt;p&gt;So what is the JAMstack? JAM stands for &lt;strong&gt;Javascript, APIs, and Markup.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But wait? That&#39;s basically what everyone nowadays uses. Yes, but... everything is served via static HTML files. So it becomes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Javascript&lt;/strong&gt; - to make our websites feel and look dynamic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;APIs&lt;/strong&gt; - our server-side processes and databases live here. They can be self-made or 3rd party&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markup&lt;/strong&gt; - the structure of our content, our assets and our dependencies, all pre-built and pre-rendered, deployed on a CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than targeting specific frameworks, databases and operative systems, like most stack terminologies, the JAMstack ties itself to the core foundations of modern web applications, not tying developers to specific technologies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The JAMstack is a different philosophy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of building your pages on a webserver on every request, you would have most of your website pages pre-built and deployed on a CDN. With this, you remove any overhead of maintaining and scaling web servers and or any kind of advanced infrastructure. Instead, you just have static files on a CDN, with super low response times, near-limitless scalability and geographical distribution, so everyone around the world would have a smooth experience while accessing your content.&lt;/p&gt;
&lt;p&gt;Behind this core concept, you find the tool that is often associated with the JAMstack, the static site generator. Super in vogue, with most being optimized for instant page load and cutting edge optimizations, static site generators take your code and data sources and they turn it into static files, ready to be deployed to any CDN of your liking.&lt;/p&gt;
&lt;p&gt;Most static site generators support all kinds of data sources. Your data may be extracted from any existing service or API that you may have. You can also use CMSs to layout your content, and you can even use... more static files! You can have your data laid out as static markdown files (or any type of file really) and import that on your static site generator.&lt;/p&gt;
&lt;p&gt;Then you bundle it all in on a CI/CD pipeline, the only infrastructure you need to manage, that is responsible for rebuilding your website every time you update your code or your data and sending it into a CDN. That&#39;s why it&#39;s essential to keep track of your code on hosted git services, like Github, as they seamlessly integrate with most CI/CD pipelines to trigger builds. If you are using a CMS, you should also integrate it into this pipeline, so content changes also trigger a new build. Check out the &lt;a href=&quot;https://medium.com/subvisual/its-not-continuous-delivery-yet-27a9e838f5df&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blogpost&lt;/a&gt; about CI/CD from our friends at &lt;a href=&quot;https://subvisual.com/&quot; title=&quot;Subvisual&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Subvisual&lt;/a&gt; if you need more info about the process!&lt;/p&gt;
&lt;p&gt;If you feel intimidated by developing your own CI/CD pipeline you can use managed services like &lt;a href=&quot;https://netlify.com/&quot; title=&quot;Netlify&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Netlify&lt;/a&gt; or &lt;a href=&quot;https://zeit.co/&quot; title=&quot;Now&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Now&lt;/a&gt;. These platforms integrate directly with hosted git services like Github or Gitlab and they build and deploy your website into a CDN, making the entire process very easy. They also can manage domains, SSL certificates, reducing the entry barrier to production to a few clicks on their dashboards. They offer very generous free plans for developers and hobby projects also, making them a great tool to try out the JAMstack.&lt;/p&gt;
&lt;h2&gt;Static is not boring&lt;/h2&gt;
&lt;p&gt;You still can develop highly interactive web applications by resorting more to APIs instead of generated static HTML. If you are not using third-party services, perhaps you still need to maintain some sort of web server and infrastructure to maintain your APIs, but still, the decoupling that you achieve now will allow you to be more productive and you still serve your frontend from a highly capable CDN, which will boost your performance all the same.&lt;/p&gt;
&lt;p&gt;But even then, you can write your server-side code without servers, by resorting to &lt;strong&gt;serverless&lt;/strong&gt; platforms, allowing you to deploy server-side code, without requiring any infrastructure whatsoever. Adding to their extensive feature set, Netlify and Now also support deploying serverless functions in Javascript and more languages.&lt;/p&gt;
&lt;p&gt;And with modern browsers having a ton of features that were mostly unthinkable in the past, we can push more and more work to the client-side. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Speech recognition&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;3D graphics&lt;/a&gt;,&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt; PWAs&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Web Assembly&lt;/a&gt; and many more tools are available on most browsers. Things that were possible only in native environments are now a reality on the web.&lt;/p&gt;
&lt;h2&gt;Our stack&lt;/h2&gt;
&lt;p&gt;To build our &lt;a href=&quot;https://auroradigital.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;website&lt;/a&gt; we use a static site generator to build the entire website, and our blog posts are managed by a headless CMS. You can check out the source code in our &lt;a href=&quot;https://github.com/aurora-digital/auroradigital.co&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github repo&lt;/a&gt;. We use Gatsby as a static site generator and Forestry as our CMS. We then build everything using Netlify. With that, we have a wonderful development experience, that allows us to develop features and also fix bugs very quickly.&lt;/p&gt;
&lt;p&gt;With near limitless scalability, we don&#39;t have to worry about scaling the website, it&#39;s just static files on a CDN. Super secure, our third parties all use Github&#39;s OAuth and are strictly audited. And finally, the developer experience is just amazing. All it takes is three steps to being able to contribute to our website: clone the git repository, install dependencies, run the bundled development server.&lt;/p&gt;
&lt;p&gt;The JAMstack is here to stay, and we are putting it into use whenever we can, to build faster, more accessible and more secure websites. In the end, all that matters is our user&#39;s experience.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;You can check these resources and tools to find out more about JAMstack! Check out their blogs for tutorials, guides, and more advanced use cases.&lt;/p&gt;
&lt;h3&gt;Static Site Generators&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot; title=&quot;Gatsby&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Gatsby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nextjs.org/&quot; title=&quot;Next&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot; title=&quot;Hugo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/&quot; title=&quot;Eleventy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eleventy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CMSs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forestry.io/&quot; title=&quot;Forestry&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Forestry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.contentful.com/&quot; title=&quot;Contentful&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Contentful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sanity.io/&quot; title=&quot;Sanity&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sanity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Platforms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/&quot; title=&quot;Netlify&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zeit.co/&quot; title=&quot;Now by Zeit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Now by Zeit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    </content>
  </entry> 
  <entry>
    <title>Dealing with webfont loading</title>
    <link href="https://jfranciscosousa.com/blog/posts/loading-webfonts/" />
    <updated>2020-06-24T23:00:00+01:00</updated>
    <id>https://jfranciscosousa.com/blog/posts/loading-webfonts/</id>
    <content type="html">
      &lt;p&gt;The time has come to implement a beautiful website design. It has a great Webfont. So you go to Google Fonts or Adobe&#39;s Typekit or you just buy one and self host it. But once you start writing code and previewing its results, you notice one &lt;em&gt;little&lt;/em&gt; pickle: the whole website shifts, flashes, and janks all over the place when refreshed or opened from a cold cache. It ain&#39;t pretty. Let&#39;s see how we can attenuate those effects.&lt;/p&gt;
&lt;h2&gt;FOIT &amp;amp; FOUT&lt;/h2&gt;
&lt;p&gt;FOIT and FOUT are acronyms likely to pop up when you search for the issues above. If you haven&#39;t heard of them before, this is what they mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FOIT - flash of invisible text. When the website has no fonts rendered until the web font loads.&lt;/li&gt;
&lt;li&gt;FOUT - flash of unstyled text. When the whole typography flashes from an unstyled state to your web font style.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of FOIT (left) and FOUT (right).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jfranciscosousa.com/images/fonts-side-by-side.gif&quot; alt=&quot;FOIT vs FOUT&quot;&gt;&lt;/p&gt;
&lt;p&gt;These issues are manifestations of a root problem. What the hell does your browser do while your web font loads?&lt;/p&gt;
&lt;p&gt;Let&#39;s remember what &lt;code&gt;font-family&lt;/code&gt; does:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MyRadWebfont&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Arial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are telling the browser to use &lt;code&gt;MyRadWebFont&lt;/code&gt; first, then &lt;code&gt;Arial&lt;/code&gt; and, if none of these are available, any &lt;code&gt;sans-serif&lt;/code&gt; font the user&#39;s device might have. &lt;code&gt;Arial&lt;/code&gt; is a safe bet because it&#39;s a font that&#39;s included in every major browser.&lt;/p&gt;
&lt;p&gt;While the web font is loading, you either get a FOIT or FOUT. It usually depends on the user&#39;s browser. A couple of years ago, most browsers applied the FOIT approach, detecting if the website is using a web font and then waiting for it until it becomes available and then swapping the invisible text with the font. Then, some browsers (mainly Firefox) started defaulting to the FOUT approach, to make sure users could see some text while fonts loaded.&lt;/p&gt;
&lt;p&gt;At the time, if you wanted control over this behavior, you had to do it yourself with custom Javascript. Nowadays, there&#39;s an easy way to do it.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;font-display&lt;/code&gt; to the rescue&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;font-display&lt;/code&gt; is a somewhat recent CSS property that can be used to control the way web fonts are loaded and how their fallback is handled. It has awesome &lt;a href=&quot;https://caniuse.com/#search=font-display&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;browser support&lt;/a&gt;. However, it doesn&#39;t work on IE. What a surprise.&lt;/p&gt;
&lt;p&gt;The property takes on these values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;block&lt;/strong&gt; - renders nothing at first, then shows the web font. If the web font loading timeouts, it shows the fallback font. An expected FOIT;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;swap&lt;/strong&gt; - renders the fallback, then swaps when the web font is loaded. An expected FOUT;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fallback&lt;/strong&gt; - same as swap, but if the web font takes too long to load, it doesn&#39;t swap and it keeps the fallback. FOUT if it doesn&#39;t timeout;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optional&lt;/strong&gt; - same as fallback, but the browser &lt;em&gt;decides&lt;/em&gt; if the ideal conditions to download web fonts are present. On a slow internet connection, for example, the browser won&#39;t download it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the gist of it. You can check out Monica&#39;s in-depth explanation, demo, and talk &lt;a href=&quot;https://font-display.glitch.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on this website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Still, the same FOIT and FOUT happen, but now at least it&#39;s predictable. And you ensure all users will get the same behavior (as long as their browsers support the &lt;code&gt;font-display&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you don&#39;t use &lt;strong&gt;Google Fonts&lt;/strong&gt;, you might be unable to specify a &lt;code&gt;font-display&lt;/code&gt; property. Most font providers give you a CSS file with &lt;code&gt;@font-face&lt;/code&gt; declarations that you cannot modify, meaning you cannot add the &lt;code&gt;font-display&lt;/code&gt; property to it. This is an issue with Typekit (which I use at work all the time), where you cannot apply the &lt;code&gt;font-display&lt;/code&gt; property. If you self host your fonts though, all is fine.&lt;/p&gt;
&lt;p&gt;Then the only solution that&#39;s left is actually handling this stuff with Javascript. Controversial, but I&#39;m gonna try and spin up a solution with a progressive enhancement mindset. Works great if you have JS, still works as expected without JS.&lt;/p&gt;
&lt;h2&gt;Smoothing out the FOIT&lt;/h2&gt;
&lt;p&gt;I&#39;ve had this idea where we knowingly apply a FOIT, by hiding the entire website until the font is available, and then fading in the entire thing. The regular FOIT behavior is a bit ugly, because you still have parts of the website rendered and then the whole thing janks and becomes visible. With this, we nicely fade in the entire website and avoid layout shifts.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;opacity&lt;/code&gt; property for that and then we&#39;ll apply a simple &lt;code&gt;transition&lt;/code&gt;. All with CSS. Then we somehow apply these styles with JS after the font is loaded.&lt;/p&gt;
&lt;p&gt;So, I&#39;ll exemplify with what is powering my own website. The source code is available on &lt;a href=&quot;https://github.com/jfranciscosousa/jfranciscosousa.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my Github repo&lt;/a&gt;, which is an Eleventy + Webpack project.&lt;/p&gt;
&lt;p&gt;First, we need to set up &lt;a href=&quot;https://github.com/bramstein/fontfaceobserver&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fontfaceobserver&lt;/a&gt;, either with your favorite JS package manager or by adding it via &lt;a href=&quot;https://cdnjs.com/libraries/fontfaceobserver&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CDN&lt;/a&gt;. Works on IE with a &lt;code&gt;Promise&lt;/code&gt; polyfill. It&#39;s a small dependency, just 1.3kb gzipped.&lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// if you can&#39;t require packages, load it via a CDN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; FontFaceObserver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fontfaceobserver&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; htmlElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;htmlElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;no-js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;htmlElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;has-js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyHasFont&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  htmlElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;no-font&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  htmlElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;has-font&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FontFaceObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Muli&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;applyHasFont&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;applyHasFont&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, we replace a &lt;code&gt;no-js&lt;/code&gt; class with a &lt;code&gt;has-js&lt;/code&gt; class when the script is loaded. Then, we replace a &lt;code&gt;no-font&lt;/code&gt; with a &lt;code&gt;has-font&lt;/code&gt; class when we load our font, &lt;code&gt;Muli&lt;/code&gt;. We also apply the &lt;code&gt;has-font&lt;/code&gt; class after a 2-second timeout, just in case the user&#39;s internet is really slow and can&#39;t download the font in an acceptable time. The second argument of the &lt;code&gt;FontFaceObserver&lt;/code&gt; constructor is the desired timeout in milliseconds. After that time elapses, the &lt;code&gt;load&lt;/code&gt; function errors.&lt;/p&gt;
&lt;p&gt;Then, on the CSS side of things:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;https://fonts.googleapis.com/css2?family=Muli:wght@200..900&amp;amp;display=swap&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Muli&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Arial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token selector&quot;&gt;.has-js.no-font body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token selector&quot;&gt;.has-js.has-font body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; opacity 0.5s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also don&#39;t forget to add the default classes to the HTML document:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;no-js no-font&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  ...&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we only apply the styles &lt;strong&gt;if&lt;/strong&gt; we have JS. This way, people that (for some reason) have their Javascript disabled, still can see the website. We are passing &lt;code&gt;display=swap&lt;/code&gt; to the Google Fonts API, so that on the lack of Javascript, this will fall back to the &lt;code&gt;swap&lt;/code&gt; behavior.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hope this post has been helpful. Personally, I avoid reinventing the wheel with JS for features that can be handled with just CSS, but in this case, a nice compromise can be reached. It respects all users in terms of connection speed and Javascript capabilities and supports different browsers.&lt;/p&gt;

    </content>
  </entry> 
  <entry>
    <title>Let’s slim down on Javascript</title>
    <link href="https://jfranciscosousa.com/blog/posts/lets-slim-down-on-javascript/" />
    <updated>2020-07-22T23:00:00+01:00</updated>
    <id>https://jfranciscosousa.com/blog/posts/lets-slim-down-on-javascript/</id>
    <content type="html">
      &lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;https://dev.to/finiam/let-s-slim-down-on-javascript-28ph&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Finiam&#39;s website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The ancient narrative of &amp;quot;Javascript bloat&amp;quot; is ever-present in the tech world. Web developers love Javascript, backend developers hate it and end-users usually don&#39;t give a damn about it as long as websites open fast, work as they should, and do not spy on them. Still, web pages have way too much Javascript, especially SPAs, that could be avoided with just a few tips. Let&#39;s see how.&lt;/p&gt;
&lt;h2&gt;Why care?&lt;/h2&gt;
&lt;p&gt;Nowadays Internet connections are pretty fast (usually) so why worry if your app has 1 megabyte of JS? Most native mobile apps go into the hundreds of megabytes!&lt;/p&gt;
&lt;p&gt;So, when dealing with Javascript, you are dealing with a scripting language (it’s in the name you see), so the code needs to be read and interpreted by something. In this case, it’s your own browser. Then that code gets loaded into memory and your browser starts doing stuff with it. The problem here is that it takes time and processing power. So if you have a simple news website, and everyone needs to download 4 megabytes of scripts and trackers to be able to see a news article, you probably just lost a reader. Those 4 megabytes of Javascript would take an immense amount of time to be downloaded, read and parsed, especially on mobile devices. Despite the awesomeness of our internet connections, most people access it via WiFi or cellular networks (3G, 4G, etc). These are unreliable and slow even in areas with good coverage. Also, note that the average phone is not that fast.&lt;/p&gt;
&lt;p&gt;The more Javascript you use, the more it takes to fetch a page from the server, the more it takes to render the content, and in the end, the more it takes the user to view the webpage. Even with top-class server tech and CDNs.&lt;/p&gt;
&lt;p&gt;A good starting point is measuring your website performance with Google Lighthouse (the Audits tab on Chrome’s Web Tools). Metrics like Largest Contentful Paint and Time to Interactive are good ways to see if Javascript is slowing down your website loading. &lt;a href=&quot;https://www.webpagetest.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WebPageTest&lt;/a&gt; is also a great tool that allows you to test your website with different devices, like slow smartphones on a limited connection, so you can better test real-world situations.&lt;/p&gt;
&lt;p&gt;Given that, let&#39;s see how we can improve our website&#39;s performance metrics, with a few tips.&lt;/p&gt;
&lt;h2&gt;Ditch SPAs&lt;/h2&gt;
&lt;p&gt;Ok, so this one is a bit extreme and probably only useful before you actually start working on your project. The fastest Javascript is no-Javascript at all. No code is the best code or so they say. By server-rendering your apps you can just ditch client-side Javascript entirely. Using something like Rails, Phoenix, Laravel or any full-stack web framework will allow you to implement web apps entirely rendered on the backend.&lt;/p&gt;
&lt;p&gt;I know, shocking. We made apps like this for ages and it kinda worked out. Check out Basecamp, they&#39;re doing pretty well. Having worked with multiple SPA libraries and server-rendered full-stack frameworks, I can attest that most times, we duplicate a bunch of concepts on the client-side that could just exist as a full-stack unit: routing, data validations, app state, API calls (when full-stack, these just don&#39;t exist).&lt;/p&gt;
&lt;p&gt;Working in a digital agency I often saw SPAs applied to very simple projects, where a classic Rails app would excel. Mea culpa, I’ve done that myself. A client-side approach is great when you want to have separate teams for backend and frontend. Having dedicated teams for both will help teams organize themselves. After all, all these SPA frameworks and libraries were made by very large organizations with very large codebases.&lt;/p&gt;
&lt;p&gt;But even for smaller projects, SPAs excel on highly reactive applications, and any application that is trying to emulate a native experience, through animations and navigation controls, for example, will also benefit from these modern frontend technologies.&lt;/p&gt;
&lt;p&gt;But still, a very good stack for CRUD like apps can be made with Rails and a tiny bit of JS, with Stimulus and Turbolinks. You get the awesome developer experience of Rails, you avoid the dread of full-page refreshes with Turbolinks, then Stimulus helps you write Javascript in a sensible way. No network request handling, no API writing, no manual auth token handling. Just raw productivity.&lt;/p&gt;
&lt;p&gt;And if you are looking for reactivity, check &lt;a href=&quot;https://github.com/hopsoft/stimulus_reflex&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;StimulusReflex&lt;/a&gt; (for Rails) and &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;LiveView&lt;/a&gt; (for Phoenix). Reactivity on the server-side.&lt;/p&gt;
&lt;p&gt;Finally, take a look at &lt;a href=&quot;https://basecamp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Basecamp&lt;/a&gt;, it only uses Rails and a very lightweight Javascript library called Stimulus and good old Turbolinks. For both Mobile and Desktop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jfranciscosousa.com/images/basecamp.gif&quot; alt=&quot;Basecamp page navigation in action&quot;&gt;&lt;/p&gt;
&lt;p&gt;A final friendly reminder on this matter. Pick something that strikes a good balance between maintainability and your team&#39;s happiness. Don&#39;t switch over to a specific technology or way of doing things just because a random dude on the internet says so! Explore and see what works for you.&lt;/p&gt;
&lt;h2&gt;Use native libraries&lt;/h2&gt;
&lt;p&gt;Now back to Javascript. Often developers reach out for a popular dependency before trying and using the native tools the browser platform offers. It&#39;s ok, for most of the Internet history the default libraries on the browser were pretty unstable or just didn&#39;t work across multiple browser versions. For example, libraries to make network requests are imported into almost every project when the browser already has a powerful tool for that: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fetch&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/validator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    Accept&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;formState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; json &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right now you probably are using something like &lt;code&gt;axios&lt;/code&gt; or &lt;code&gt;superagent&lt;/code&gt; on your web app, both sitting at 4.4kb and 6.4kb total size respectively, at the time of writing this blog post. I resort to &lt;code&gt;axios&lt;/code&gt; all the time due to old habits, but I&#39;ve been replacing it with &lt;code&gt;fetch&lt;/code&gt; and life has been great.&lt;/p&gt;
&lt;p&gt;Most problems pointed to &lt;code&gt;fetch&lt;/code&gt; are its lack of defaults and weird error handling (they only throw errors on network failure and not on bad responses), but that can be fixed with a simple custom wrapper. Check out this awesome &lt;a href=&quot;https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog post&lt;/a&gt; from Kent C. Dodds where he builds a custom wrapper to remove all problems regarding the lack of sane defaults.&lt;/p&gt;
&lt;p&gt;If you want to keep around the axios API, you can always use &lt;a href=&quot;https://github.com/developit/redaxios&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;redaxios&lt;/a&gt;. An axios compatible API that uses &lt;code&gt;fetch&lt;/code&gt; under the hood and it&#39;s just 800 bytes!&lt;/p&gt;
&lt;p&gt;And if you need to support older browsers, use &lt;a href=&quot;https://github.com/developit/unfetch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;unfetch&lt;/a&gt; as a polyfill.&lt;/p&gt;
&lt;p&gt;Try and use the browser&#39;s native functionality before going after solutions on npm, you will be surprised. Browsers can do awesome stuff nowadays and almost every single functionality can be polyfilled back into older browsers.&lt;/p&gt;
&lt;h2&gt;Be careful with 3rd party dependencies&lt;/h2&gt;
&lt;p&gt;Even though the browser is a great platform, it&#39;s pretty rare to complete a project without ever using a 3rd party dependency. Even if you maximize the natural power of the browser, there are essential libraries that you will probably need. One thing that happens though, is that people often search for a given library and don&#39;t really think about the consequences. Any library you use will increase the total size of your web app. We should be mindful of that.&lt;/p&gt;
&lt;p&gt;How? Use a tool like &lt;a href=&quot;https://bundlephobia.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Bundlephobia&lt;/a&gt; to inspect the size of a package before using it, and to check if it is tree-shakeable. And what is a tree-shakeable package you might ask? It basically means that most Javascript bundler like Rollup, Webpack, and others will remove the code you do not use from said package.&lt;/p&gt;
&lt;p&gt;For example, if you import &lt;code&gt;lodash&lt;/code&gt; the entire package will end up on your final bundle. However, you can use the alternative &lt;code&gt;lodash-es&lt;/code&gt;, which does the same thing and is tree-shakeable, and you only use the functions you import. As long as you do this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; uniqueId &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lodash-es&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, try to find the right balance between &amp;quot;reinventing the wheel&amp;quot; or adding another dependency. And when you are looking for libraries to solve your problems, pick one that is small and tree-shakeable.&lt;/p&gt;
&lt;p&gt;You can also resort to code-splitting and load polyfills conditionally. I&#39;ll show you how in a bit.&lt;/p&gt;
&lt;h2&gt;Code Splitting&lt;/h2&gt;
&lt;p&gt;If you are using a Javascript bundler, chances are you have the ability to perform code-splitting. It basically consists of splitting your overall Javascript codebase into different modules. It is usually used to not load your entire application at once. If you have a large web app, it&#39;s usually a good idea to perform code-splitting, so your users don&#39;t need to download every single piece of Javascript in your app.&lt;/p&gt;
&lt;p&gt;For example, if you have a React app with &lt;code&gt;react-router&lt;/code&gt; you can perform route-based code splitting. Each different page on your app will have its own module plus a common bundle, which will contain the Javascript code that is common to all different modules. This will reduce the initial load size for each part of the web app but at the cost of having to make a network request every time the route changes.&lt;/p&gt;
&lt;p&gt;I am not going in-depth on implementation details, but you can check the &lt;a href=&quot;https://reactrouter.com/web/guides/code-splitting&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;react-router&lt;/code&gt; docs&lt;/a&gt; on the best way of doing this. The important thing to note is that we should only load code that the user needs or will almost surely need in the future.&lt;/p&gt;
&lt;p&gt;Popular frameworks on top of their SPA libraries like Next.js (React), Nuxt (Vue.js), and Sapper (Svelte) do this out of the box via code splitting based on-page components. This is a cool way of going about this since you do need to manually implement this yourself.&lt;/p&gt;
&lt;p&gt;You can even use this strategy to conditionally load dependencies. In the next example, we are importing some polyfills only if the browser does not support the given functionality natively.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; IntersectionObserver &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;intersection-observer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; Map &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;core-js/es6/map&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; Set &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;core-js/es6/set&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;requestAnimationFrame &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;raf/polyfill&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apply this to anything you need. You can use this to load different bundles for mobile or desktop. For different user roles, for example, regular users won&#39;t probably need to have the admin dashboard code loaded into their browsers.&lt;/p&gt;
&lt;h2&gt;Don&#39;t support older browsers&lt;/h2&gt;
&lt;p&gt;Dramatic statement. Nowadays you are probably using &lt;code&gt;babel&lt;/code&gt; to transpile your JS code for it to be compatible with older browsers. So every single new feature of the language is then ported back to be supported. If you have IE (Internet Explorer) as a target, then &lt;code&gt;babel&lt;/code&gt; will convert every arrow function into a regular function. Transpiled code is longer, heavier, and probably not as optimized as the code you have actually written.&lt;/p&gt;
&lt;p&gt;How to solve this? Ditch older browsers. I mean, this might seem ridiculous and counter-intuitive at first but older browsers, mostly IE obviously, are insecure, slower, and just plain worse than the alternative. If a computer runs IE it probably can run either Chrome or Firefox. There are a few cases where this is not possible. Some institutions and companies just don&#39;t allow people to update or install applications on their computers, so they are stuck with Windows XP and IE.&lt;/p&gt;
&lt;p&gt;If you cut down the number of polyfills you need, and the transformations your code needs to run on the browser, you can save some serious space. You can also create different Javascript bundles, one for modern browsers and one for older ones. You can check if the user runs IE and ship off the polyfilled bundles to them, but for that, you would need a server that is parsing the user agent of the HTTP requests. If you are making a &lt;a href=&quot;https://auroradigital.co/blog/articles/a-primer-on-the-jamstack&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;JAMstack&lt;/a&gt; app you probably can&#39;t parse the user agent string efficiently, and everyone will get the same bundle anyway.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://polyfill.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;polyfill.io&lt;/a&gt; is a possibility, it loads polyfills conditionally, based on your browser’s version.&lt;/p&gt;
&lt;p&gt;Remember, you can always review your web app user base and check the percentage of users with older browsers. You can track your user&#39;s browser versions respectfully by using a privacy-focused tracker (a bit paradoxical) like &lt;a href=&quot;https://www.goatcounter.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Goatcounter&lt;/a&gt;. They just collect very basic information that cannot uniquely identify users, respecting their privacy. You will probably notice that you don&#39;t have IE users at all (this is the case for the products I&#39;ve been working on at least).&lt;/p&gt;
&lt;p&gt;For the global market share, IE has 3%, but it&#39;s a good idea to scan the market and see if it makes sense to be IE friendly. Imagine that your app is a specific tool for Linux people. They won&#39;t be using IE at all.&lt;/p&gt;
&lt;p&gt;It&#39;s a matter of user research like all great products should have. An app for the enterprise financial market would probably need IE. Lot&#39;s of people on that field are stuck on Windows XP due to organizational restrictions. For a rad startup idea? Probably no IE users will pop up.&lt;/p&gt;
&lt;p&gt;At the very least, make sure your landing page works on IE, then just tell people to upgrade :)&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;The rationale is simple. Be mindful of the cost of Javascript (probably the &lt;a href=&quot;https://v8.dev/blog/cost-of-javascript-2019&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;greatest blog post&lt;/a&gt; on this matter), and use simple solutions to deal with it. Don’t forget that premature optimization is the root of all evil, but a couple of tweaks early on in a project’s lifetime can make a world of difference.&lt;/p&gt;
&lt;p&gt;Also, make sure you test your web experiences on slower devices. I cannot say this enough. Not everyone has a Galaxy S20 or the latest shiny iPhone in their pockets.&lt;/p&gt;
&lt;p&gt;It all boils down to the user experience. Make accessible, performant web apps that do just what they are supposed to do, well.&lt;/p&gt;

    </content>
  </entry> 
  <entry>
    <title>Building and hosting a Discord bot</title>
    <link href="https://jfranciscosousa.com/blog/posts/building-and-hosting-discord-bots/" />
    <updated>2020-07-29T23:00:00+01:00</updated>
    <id>https://jfranciscosousa.com/blog/posts/building-and-hosting-discord-bots/</id>
    <content type="html">
      &lt;p&gt;Discord is one of the premier instant communication platforms on the web right now. Free, easy to use, and just cool, Discord is one of the main hangout apps for gamers, developers, and just overall tech people. One of the coolest things about it is the ability to install bots on your servers that make some cool stuff. Bots that play music, text-based RPGs, dice rollers for RPGs (I made one), meme generators, and many more. In this blog post, I&#39;m going to walk you through on all the steps needed to make your bot and host it for free (kinda free), provided you have some basic &lt;code&gt;ruby&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; knowledge.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Why Ruby? Well, no reason at all. It&#39;s just my favorite language at the moment of writing. Its also the language I have been using at work for these past few years. And, I find it&#39;s just so simple and easy to understand for people who use it sparingly.&lt;/p&gt;
&lt;p&gt;And why Heroku? It&#39;s a hosting platform that integrates with Github and automatically provides a CI/CD pipeline that continuously deploys your changes. This way you can make changes to your bot, commit that with &lt;code&gt;git&lt;/code&gt; and your bot will just update itself on Heroku. We just need a little hack to make it work there but will get to that.&lt;/p&gt;
&lt;p&gt;So some prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discord account&lt;/li&gt;
&lt;li&gt;Github account&lt;/li&gt;
&lt;li&gt;Heroku account&lt;/li&gt;
&lt;li&gt;Basic Ruby knowledge&lt;/li&gt;
&lt;li&gt;Ruby (latest version) and Git installed and available on your path&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you create all of these accounts, make sure you create a new Discord app. For that visit &lt;a href=&quot;https://discord.com/developers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their developer portal&lt;/a&gt;. Click &lt;code&gt;New Application&lt;/code&gt; on the top right corner and follow along.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jfranciscosousa.com/images/discord1.png&quot; alt=&quot;Discord app client id&quot;&gt;&lt;/p&gt;
&lt;p&gt;After creating it, on the bot&#39;s main page you can take note of the &lt;code&gt;CLIENT ID&lt;/code&gt;, we are going to need it. Then go to the &lt;code&gt;Bot&lt;/code&gt; tab on the side menu and. On that new screen, you can add a bot user to your application. Do it and take note of the &lt;code&gt;TOKEN&lt;/code&gt; value also. All the other options are not needed for now, but you&#39;ll probably explore those later on as you develop your bot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jfranciscosousa.com/images/discord2.png&quot; alt=&quot;Discord bot token&quot;&gt;&lt;/p&gt;
&lt;h2&gt;The bot&lt;/h2&gt;
&lt;p&gt;Now make sure your directory dedicated to this project and also don&#39;t forget to initialize a git repo, we are going to need it. Now, like most ruby projects, let&#39;s start with a &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;source &lt;span class=&quot;token string&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;ruby &lt;span class=&quot;token string&quot;&gt;&quot;2.7.1&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;gem &lt;span class=&quot;token string&quot;&gt;&quot;discordrb&quot;&lt;/span&gt;&lt;br&gt;gem &lt;span class=&quot;token string&quot;&gt;&quot;dotenv&quot;&lt;/span&gt;&lt;br&gt;gem &lt;span class=&quot;token string&quot;&gt;&quot;rake&quot;&lt;/span&gt;&lt;br&gt;gem &lt;span class=&quot;token string&quot;&gt;&quot;zeitwerk&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating and saving this file, run &lt;code&gt;bundle install&lt;/code&gt; to install these dependencies.&lt;/p&gt;
&lt;p&gt;Now, what do these gems do? Let&#39;s go through them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;discordrb&lt;/code&gt; - this is a wrapper of the Discord API. We are going to need this to effectively communicate with Discord&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotenv&lt;/code&gt; - we are going to use this to load the secret keys that we got from Discord&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake&lt;/code&gt; - the classic ruby task runner. We are going to use this to start the app.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zeitwerk&lt;/code&gt; - a class loader. We&#39;ll set up this soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let&#39;s write the code that will connect to discord and handle incoming commands. Let&#39;s place it on &lt;code&gt;src/discord_bot.rb&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DiscordBot&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Lacking required secrets!&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CLIENT_ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token variable&quot;&gt;@bot&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Discordrb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Bot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    token&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    client_id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CLIENT_ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;  puts &lt;span class=&quot;token string&quot;&gt;&quot;This bot&#39;s invite URL is &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token delimiter tag&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;@bot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invite_url&lt;span class=&quot;token delimiter tag&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;br&gt;  puts &lt;span class=&quot;token string&quot;&gt;&quot;Click on it to invite it to your server&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token variable&quot;&gt;@bot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;with_text&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;!ping&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;event&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;br&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;respond &lt;span class=&quot;token string&quot;&gt;&quot;pong&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;@bot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;run&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invite_url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;@bot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invite_url&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the &lt;code&gt;discordrb&lt;/code&gt; library to create a bot instance using the values from our shell environment.&lt;/p&gt;
&lt;p&gt;Then, we define a handler for a bot command. The handler will intercept every message that matches &lt;code&gt;!ping&lt;/code&gt; and respond to it with a &lt;code&gt;pong&lt;/code&gt; message.&lt;/p&gt;
&lt;p&gt;Then we just declare methods to run the bot and get the invite URL. The bot &lt;code&gt;run&lt;/code&gt; method connects to Discord via a persistent websocket connection. That&#39;s how our bot reads all of the incoming messages from the servers it&#39;s installed in.&lt;/p&gt;
&lt;p&gt;To correctly set the environment, create a file called &lt;code&gt;.env&lt;/code&gt; and add the values you got on the Discord developer portal. The &lt;code&gt;dotenv&lt;/code&gt; gem will take care of loading all of those values into the environment, just when we run our application. On Heroku we will define these variables on their dashboard. But for now, the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;CLIENT_ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;the client &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt; you got on discord dev&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;the client secret you got on discord dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DO NOT FORGET TO ADD THIS FILE TO THE GITIGNORE OF YOUR PROJECT&lt;/strong&gt; otherwise, you are leaking secret information to the public.&lt;/p&gt;
&lt;p&gt;Now to wrap everything up, let&#39;s write our &lt;code&gt;Rakefile&lt;/code&gt; so that we can run our discord bot.&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RUBY_ENV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bundler/setup&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dotenv/load&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RUBY_ENV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token constant&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;RUBY_ENV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;loader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Zeitwerk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;for_gem&lt;br&gt;loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;push_dir&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dirname&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__FILE__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/src&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;loader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setup&lt;br&gt;&lt;br&gt;task &lt;span class=&quot;token symbol&quot;&gt;:bot&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;DiscordBot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;run&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We wrap the entire file in a conditional that checks if we are running the file with ruby and not requiring it from another ruby file. This is usually done on ruby scripts that are meant to be executed from the command line.&lt;/p&gt;
&lt;p&gt;Then we require the &lt;code&gt;bundler/setup&lt;/code&gt;, so we can automatically require all the gems into the project. We then require &lt;code&gt;dotenv/load&lt;/code&gt; only if we are outside of a production environment. During production, we don&#39;t want to load environment variables from the &lt;code&gt;.env&lt;/code&gt; file, we just want to load them from the Heroku configuration.&lt;/p&gt;
&lt;p&gt;We also set up &lt;code&gt;zeitwerk&lt;/code&gt;, which will automatically require our own files. In this case, we have a &lt;code&gt;src/discord_bot.rb&lt;/code&gt; file which defines a &lt;code&gt;DiscordBot&lt;/code&gt; module. Check &lt;a href=&quot;https://github.com/fxn/zeitwerk#file-structure&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this link&lt;/a&gt; for more info on Zeitwerk file structure. We push the &lt;code&gt;src&lt;/code&gt; dir as a root dir for our code and then we run setup to load it.&lt;/p&gt;
&lt;p&gt;Then we define the task to run the bot. Then, to start it, just run &lt;code&gt;bundle exec rake bot&lt;/code&gt;. Now use the invite URL that shows up in the console and try it on your server! The bot should appear on the online user list and it should respond to a &lt;code&gt;!ping&lt;/code&gt; message with &lt;code&gt;pong&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;How to put this online&lt;/h2&gt;
&lt;p&gt;Now the bot works great and it&#39;s even ready for deployment. You host this on any server that you might have handy. Just send this code over and run &lt;code&gt;rake bot&lt;/code&gt;. But, most of us don&#39;t have handy servers there. This is where Heroku comes in.&lt;/p&gt;
&lt;p&gt;Heroku is a hosting platform for web apps. &lt;em&gt;Web apps&lt;/em&gt; is an important term. Meaning that Heroku expects that your app is an HTTP server of some sort, that binds to a port and responds to incoming request. If you deploy our code to Heroku, it will work for a couple of minutes before shutting down. This is because Heroku shuts down any app that does not bind to any port! So we just need to add a webserver to it.&lt;/p&gt;
&lt;h3&gt;Sinatra&lt;/h3&gt;
&lt;p&gt;We are going to spin up a very simple Sinatra webserver that will have a simple HTML page that will contain the invite URL for our bot. It&#39;s pretty useful stuff. You just share the Heroku app URL with your friends and they&#39;ll be able to invite the bot to their servers.&lt;/p&gt;
&lt;p&gt;Let&#39;s go back to our Gemfile. Just the add &lt;code&gt;gem &amp;quot;sinatra&amp;quot;&lt;/code&gt; to it and then run &lt;code&gt;bundle install&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;Now let&#39;s set up our webserver. We need to create a folder at &lt;code&gt;src/webserver&lt;/code&gt; and then one more subfolder at &lt;code&gt;src/webserver/views&lt;/code&gt;. The &lt;code&gt;views&lt;/code&gt; folder will hold all of our HTML templates. In this case, just one.&lt;/p&gt;
&lt;p&gt;Then we create our HTML template at &lt;code&gt;src/webserver/views/index.erb&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-erb&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;token doctype-tag&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;token name&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;utf-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The greatest bot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br&gt;      &lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 40px auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 650px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.6&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 18px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #444&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Greatest Bot&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      I am the greatest bot. Add me to your server with my glorious&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@url&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;invite url&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      This is a good place to post instructions on how&lt;br&gt;      to use your bot by the way!&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then create a &lt;code&gt;src/webserver.rb&lt;/code&gt; file and a &lt;code&gt;src/webserver&lt;/code&gt; folder. On our &lt;code&gt;src/webserver.rb&lt;/code&gt; we are going to define the homepage route of our web app.&lt;/p&gt;
&lt;pre class=&quot;language-rb&quot;&gt;&lt;code class=&quot;language-rb&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Webserver&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Base&lt;/span&gt;&lt;br&gt;  set &lt;span class=&quot;token symbol&quot;&gt;:views&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dirname&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__FILE__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/webserver/views&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  get &lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;@url&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;DiscordBot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invite_url&lt;br&gt;&lt;br&gt;    erb &lt;span class=&quot;token symbol&quot;&gt;:index&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we receive a request on the &lt;code&gt;/&lt;/code&gt; route, we set the &lt;code&gt;@url&lt;/code&gt; with the bot&#39;s invite URL. Then we render the &lt;code&gt;index.erb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we just need to add another task to our &lt;code&gt;Rakefile&lt;/code&gt; file to boot up the webserver and the bot at the same time. Add this to the &lt;code&gt;Rakefile&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;task &lt;span class=&quot;token symbol&quot;&gt;:web&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token constant&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4567&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    app&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Webserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;task &lt;span class=&quot;token symbol&quot;&gt;:all&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fork &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bot&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invoke &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fork &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;web&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invoke &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token constant&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;waitall&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The web task boots up a webserver that listens for requests at the port defined on our environment or 4657. By default, Heroku adds a &lt;code&gt;PORT&lt;/code&gt; variable that holds the port we need to bind to. On the other hand, the &lt;code&gt;all&lt;/code&gt; task spawns two processes that will run at the same time. One for the webserver and other for the Discord bot itself. This will allow us to run the entire thing for free, more details on that later.&lt;/p&gt;
&lt;p&gt;During development, you can always just work on the bot or the webserver, or both at the same time.&lt;/p&gt;
&lt;p&gt;The final step we need is to create the &lt;code&gt;Procfile&lt;/code&gt;. On this file, we specify what Heroku will run. In this case, we want Heroku to run everything in one dyno, the &lt;code&gt;web&lt;/code&gt; dyno. Heroku can run multiple &lt;code&gt;dynos&lt;/code&gt; of different kinds. We could even have separate dynos, one for the bot and other for the webserver, but to fit on the free tier, we can only use one without running into limits.&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;web&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rake all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, to run the bot and the server at the same time do &lt;code&gt;rake all&lt;/code&gt;. This will start both scripts and it will display its outputs on different colors. Very useful for debugging and seeing what&#39;s happening. Oh, and you can visit your shiny website at &lt;a href=&quot;http://localhost:5000/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://localhost:5000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember, that with this setup you can always run just the bot or just the webserver locally. &lt;code&gt;rake bot&lt;/code&gt; or &lt;code&gt;rake web&lt;/code&gt; will do the trick. Just in case you don&#39;t want to work on the entire thing.&lt;/p&gt;
&lt;h3&gt;Heroku&lt;/h3&gt;
&lt;p&gt;Now, to deploy all of this to Heroku make sure you have all of this code on a Github repo. Then create a new app on Heroku and use the &lt;code&gt;Connect with Github&lt;/code&gt; function. Then just follow to connect with your Github repo. Finally, click the &lt;code&gt;Deploy branch&lt;/code&gt; button to deploy your code. You can optionally enable automatic deploys so every time you commit to master, you trigger a new build.&lt;/p&gt;
&lt;p&gt;Your app will probably not work right away. You need to set the correct environment variables for it to work. Go to the &lt;code&gt;Settings&lt;/code&gt; tab on Heroku. Then on the &lt;code&gt;Config Vars&lt;/code&gt; zone click reveal and then introduce the following variables:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;RUBY_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;CLIENT_ID&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;your client &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt; from discord dev portal&lt;br&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;TOKEN&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;your secret token &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt; from discord dev portal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use the same values you have on your &lt;code&gt;.env&lt;/code&gt; file for the discord secrets. But note that is a best practice to have different apps and different values for the development and production build. If your bot is used by many people, it&#39;s probably a bad idea to use the same bot app during development, because it&#39;s already running an instance on Heroku and it might introduce downtime for its users. But all it takes is just creating another app as we did earlier, and use those new credentials here on Heroku.&lt;/p&gt;
&lt;p&gt;After setting the environment variables, Heroku should automatically re-release the app. Click the &lt;code&gt;Open App&lt;/code&gt; in the top-right area. It should take you to the website with the invite URL. Use it for your server, then test the bot as you did during development. By the way, the server on your own machine, in case you are using the same credentials for both production (Heroku) and development, just to make sure there are no interferences.&lt;/p&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;Heroku offers a &lt;em&gt;hobby&lt;/em&gt; tier that allows you to host an app for free, provided it runs only a few hours per day. Heroku automatically kills your app after it idles for a while. That&#39;s based on web requests, so even if people are using the bot on Discord, that doesn&#39;t count as traffic for Heroku. Our bot uses websockets to send and receive messages from Discord, so that doesn&#39;t count for Heroku. More info on &lt;a href=&quot;https://link/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their docs page&lt;/a&gt; about the free tier.&lt;/p&gt;
&lt;p&gt;Though, if you add a credit card to your account to validate it, you get enough hours to run a single dyno the entire month 24/7. By fitting all of our tasks into the &lt;code&gt;rake all&lt;/code&gt; task, we can just consume hours in a single dyno. Not ideal, but it works for our use case.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now the bot is up running, but it doesn&#39;t do much. The hardest part of getting it up and running on the outside world is done, but now it&#39;s up to you to fill the rest in.&lt;/p&gt;
&lt;p&gt;You should take a look at &lt;code&gt;discordrb&lt;/code&gt; &lt;a href=&quot;https://github.com/discordrb/discordrb/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wiki page&lt;/a&gt; and also their &lt;a href=&quot;https://www.rubydoc.info/github/meew0/discordrb/Discordrb&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;API documentation&lt;/a&gt; for more advanced stuff. Their API is plenty easy to work with.&lt;/p&gt;
&lt;p&gt;You may also see a &amp;quot;real&amp;quot; bot in action using this template and these libraries. I made a bot a while back to roll dice. I use it just for fun and some online Dungeons &amp;amp; Dragons sessions. You can check the code &lt;a href=&quot;https://github.com/jfranciscosousa/dicer&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here on my Github repo&lt;/a&gt; and you can also invite it to your server by visiting &lt;a href=&quot;https://thedicer.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;it&#39;s home page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;A final note&lt;/h2&gt;
&lt;p&gt;This will work for hobby projects of sorts, but any bot with a significant amount of servers will perhaps need a little more horsepower to run, and the hobby tier from Heroku won&#39;t cut it. Also, running two processes on one dyno is not the best way to go about a performant. But hey! We usually say that &amp;quot;premature optimization is the root of all evil&amp;quot;, so don&#39;t sweat it. When things get slow, just split off the webserver and the bot in different dynos and boost them (that won&#39;t be free anymore though).&lt;/p&gt;
&lt;p&gt;I packaged the teachings of this blog post into a starter repo that you can use instead of following these steps. I&#39;ll keep that repo updated but there might be the chance that the code is slightly different. People might find better ways to do things and I&#39;ll happily accept that! Anyway, the repo&#39;s README will get you sorted. Check it at &lt;a href=&quot;https://github.com/jfranciscosousa/discordrb-template&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;

    </content>
  </entry> 
  <entry>
    <title>Spicing up your Rails frontend experience</title>
    <link href="https://jfranciscosousa.com/blog/posts/spicing-up-your-rails-frontend-experience/" />
    <updated>2020-08-18T23:00:00+01:00</updated>
    <id>https://jfranciscosousa.com/blog/posts/spicing-up-your-rails-frontend-experience/</id>
    <content type="html">
      &lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;https://dev.to/finiam/spicing-up-your-rails-frontend-experience-546j&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Finiam&#39;s website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Rails is great. You can still check DHH&#39;s &lt;a href=&quot;https://www.youtube.com/watch?v=Gzj723LkRJY&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;15-minute blog demo&lt;/a&gt; and just appreciate the combination of features and ease of use of the framework. Even though there are even easier ways to make a blog nowadays (cough cough Gatsby), Rails is still a rock-solid choice for crafting digital products.&lt;/p&gt;
&lt;h2&gt;Rails and the modern web&lt;/h2&gt;
&lt;p&gt;Despite being a Rails advocate, I mainly used it to build APIs, resorting to React for the frontend stuff. Working with some demanding web designers, I felt that React always had a flexibility that I did not get with HTML and JS. Also, having worked on very large codebases for both full Rails with HTML and Javascript (jQuery at the time) and Rails with a SPA on top, the latter always evolved better in terms of technical debt and time needed to implement features.&lt;/p&gt;
&lt;p&gt;There are pros and cons to each approach and we like to analyze those on a per-project basis. More and more we see great success on teams going with fully server-side approaches, like Basecamp for example. Github is another case of a mostly server-side Rails app that works great (most of the time).&lt;/p&gt;
&lt;p&gt;Even with a fully server-side approach, you can create experiences that for end-users, will be indistinguishable from a fully client-side web app. The instant page transitions, components, and cool APIs to interact with the DOM. Let&#39;s see how.&lt;/p&gt;
&lt;h2&gt;Turbolinks and remote helpers&lt;/h2&gt;
&lt;p&gt;The big deal about SPAs is on its name. &lt;strong&gt;single page applications&lt;/strong&gt; don&#39;t have page transitions, it&#39;s usually done in the client-side and it looks and feels like a native app. An issue with server-side approaches is that every page change (clicking links) triggers a server request and a subsequent full page load. But you can fix that with Turbolinks.&lt;/p&gt;
&lt;p&gt;Perhaps you&#39;ve heard about it, Turbolinks has been on the Rails ecosystem for quite a while. It basically is a piece of Javascript that detects navigation requests, like clicking a link, and then fetches the page and merges the &lt;code&gt;head&lt;/code&gt; and swaps the &lt;code&gt;body&lt;/code&gt;. Thus, changing a page without a full refresh.&lt;/p&gt;
&lt;p&gt;How do you install it? Simple, you don&#39;t, Rails comes with it installed and set up by default! For non-Rails projects it&#39;s pretty simple, just check out &lt;a href=&quot;https://github.com/turbolinks/turbolinks#installation-using-npm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not only Rails has default Turbolinks support, but it also has a ton of small features to assist in implementing instant user interactions. You can submit forms and trigger controller actions with links and buttons with AJAX and no extra code. &lt;a href=&quot;https://guides.rubyonrails.org/working_with_javascript_in_rails.html#remote-elements&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Their doc page&lt;/a&gt; about working with Javascript has a pretty detailed explanation of these &amp;quot;remote elements&amp;quot;.&lt;/p&gt;
&lt;p&gt;The only thing that is not handled by default in Rails and Turbolinks is when a controller action renders a new template. Turbolinks supports &lt;code&gt;redirect_to&lt;/code&gt; out of the box, but when a template is rendered using &lt;code&gt;render&lt;/code&gt;, it causes a full page refresh. This often happens after you submit a form. Even if you are using the &lt;code&gt;form_with&lt;/code&gt; helper, which triggers an AJAX request instead of the traditional form submission, you will still re-render the page.&lt;/p&gt;
&lt;p&gt;Take for instance, this &lt;code&gt;create&lt;/code&gt; controller action:&lt;/p&gt;
&lt;pre class=&quot;language-rb&quot;&gt;&lt;code class=&quot;language-rb&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token variable&quot;&gt;@schedule&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;schedule_params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token variable&quot;&gt;@statuses&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statuses&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keys&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;valid&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br&gt;    schedule_status_change&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;@schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    redirect_to&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new_schedule_path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; notice&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Scheduled!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br&gt;    flash&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;now&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Invalid!&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    render action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;new&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, Turbolinks handles the case where the form is valid because we use &lt;code&gt;redirect_to&lt;/code&gt;. But when the form is invalid, we will have a full page refresh, because we are re-rendering with the &lt;code&gt;render&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Solution? Just install &lt;a href=&quot;https://github.com/jorgemanrubia/turbolinks_render&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this handy gem&lt;/a&gt; made by Jorge Manrubia. That&#39;s it. Right now, at the time of writing, Turbolinks version 5 doesn&#39;t support this, but the upcoming version 6 will handle this with no extra setup.&lt;/p&gt;
&lt;h2&gt;Components&lt;/h2&gt;
&lt;p&gt;Right now, developers and designers on the web design and implement UI with a component-based approach. It&#39;s easier to organize and re-use code this way. It&#39;s also the way design systems are usually maintained. And now with design systems becoming more and more popular, components even feel like the &lt;strong&gt;way&lt;/strong&gt; to make web applications.&lt;/p&gt;
&lt;p&gt;The traditional SPA assumes this model, usually, and it&#39;s pretty easy to do it. However, on Rails, there is no notion of this, and you are on your own to implement your components. The most popular way is just to use CSS. Naming schemes like SuitCSS and BEM allow you to define reusable CSS classes for your project. But what happens when you also need markup or behavior?&lt;/p&gt;
&lt;p&gt;You can always implement your components using view partials, and your behavior as regular Javascript files, but that isn&#39;t ideal. What if there was a way to encapsulate CSS, JS, and HTML on a nice package, and re-use that throughout your app?&lt;/p&gt;
&lt;p&gt;Introducing &lt;code&gt;view_component&lt;/code&gt;, made by Github. Using this library, you can define all of your components on &lt;code&gt;app/components&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A component is a combination of a Ruby class, an ERB template, a CSS file, and a JS file. You can control server-side behavior on that Ruby class, define your markup on your ERB template and then control the frontend side of things with CSS and JS.&lt;/p&gt;
&lt;p&gt;As an example, I&#39;ll show you the implementation of a flash alert component, that we can use to render Rails flash notices and errors.&lt;/p&gt;
&lt;p&gt;First, we need to define the Ruby class that renders the component. In its basic form, it&#39;s just a regular constructor that you use to set instance variables, kinda like a controller.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;render?&lt;/code&gt; method can be used to determine if we should render the markup of the component. In this case, we don&#39;t render anything at all if we don&#39;t have any flash messages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app/components/flash_message_component.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlashMessageComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ViewComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Base&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flash&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;@flash&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; flash&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;@flash&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keys&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;positive&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we just define markup like we would for a regular Rails view. You can use any template engine you like (&lt;code&gt;slim&lt;/code&gt; for example). I prefer traditional ERB.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app/components/flash_message_component.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &amp;lt;% @flash.each do |key, value| %&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Flash Flash-&amp;lt;%= key %&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &amp;lt;%= value %&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &amp;lt;% end %&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some basic styling:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app/components/flash_message_component.html.scss&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.Flash &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 12px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.5rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translateX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token selector&quot;&gt;.Flash-notice &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cadetblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token selector&quot;&gt;.Flash-alert &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s all it takes to define a component. To use it, we just reference it like this:&lt;/p&gt;
&lt;pre class=&quot;language-erb&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; render&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FlashMessageComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;flash&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flash&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can do this for all sorts of UI elements and it allows you to encapsulate UI logic on these re-usable bits. Now, you probably noticed that we don&#39;t have any JS here. Will touch that in a bit, let&#39;s just talk about Stimulus first.&lt;/p&gt;
&lt;h2&gt;Stimulus&lt;/h2&gt;
&lt;p&gt;Now, our previous example was pretty nice, but we lack JS to make the flash component &lt;em&gt;behave&lt;/em&gt;. When I first started working with Rails (back in 2014) the defacto way was to just use jQuery to make stuff all interactive and nice. And we all know how that ends up with large codebases.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jfranciscosousa.com/images/spaghetti.jpg&quot; alt=&quot;A dish of spaghetti with meatbals&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spaghetti code get it? Yes, it&#39;s a lame joke.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The folks at Basecamp, who pretty much invented Rails anyway, created this simple library (not a framework) to solve the mess of having a bunch of random Javascript with jQuery all over the place. Stimulus uses simple data attributes and small Javascript controllers to add rich interactions to Rails apps (also works without Rails).&lt;/p&gt;
&lt;p&gt;I&#39;m not going super in-depth on Stimulus, their docs are pretty thorough and easy to pick up. Still, let&#39;s see how we can combine &lt;code&gt;Stimulus&lt;/code&gt; with &lt;code&gt;view_component&lt;/code&gt; to make our flash component nicer. Currently, when a flash message is rendered, it stays there forever, so lets us make it go away after some time and also add a button to dismiss it.&lt;/p&gt;
&lt;p&gt;Refer to Stimulus docs to set it up. Then refer to &lt;a href=&quot;https://github.com/github/view_component#stimulus&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this part&lt;/a&gt; of the &lt;code&gt;view_component&lt;/code&gt; docs to integrate both libraries.
By default Stimulus just searches for controllers on the &lt;code&gt;app/javascript/controllers&lt;/code&gt; path. With these integrations, we can also define controllers on the &lt;code&gt;app/components&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Now, back to our flash component. Let&#39;s change our old markup a little bit. We need to add the button and the respective Stimulus related attributes.&lt;/p&gt;
&lt;pre class=&quot;language-erb&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-controller&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flash-message&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@flash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Flash Flash-&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; key &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; value &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-action&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;click-&gt;flash-message#close&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Close&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We added the &lt;code&gt;data-controller&lt;/code&gt; attribute, to tie this markup with its respective Stimulus controller. Then we added a button with a &lt;code&gt;data-action&lt;/code&gt; attribute. We specify &lt;code&gt;click-&amp;gt;flash-message#close&lt;/code&gt;, which means we are mapping the &lt;code&gt;click&lt;/code&gt; event with the &lt;code&gt;close&lt;/code&gt; function of our &lt;code&gt;flash-message&lt;/code&gt; Stimulus controller.&lt;/p&gt;
&lt;p&gt;The naming of these files matters a lot, like most Rails stuff. The &lt;code&gt;flash_message_controller&lt;/code&gt; defines the &lt;code&gt;flash_message&lt;/code&gt; controller. If you want to use it on your markup, you must reference it that way, always. And yes you can use it in different places on your HTML. &lt;strong&gt;Warning&lt;/strong&gt;, controllers on &lt;code&gt;app/components&lt;/code&gt; can have name collisions with components on &lt;code&gt;app/javascript/controllers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, the controller:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app/components/flash_message_controller.js&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Controller &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stimulus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;extends&lt;/span&gt; Controller &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;disconnect&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stimulus controllers have a bunch of lifecycle related functions, you can check those on the docs, but here we are redefining &lt;code&gt;connect&lt;/code&gt; and &lt;code&gt;disconnect&lt;/code&gt;. We use those to set a timeout to close the flash message and also to clear that message if the controller is unloaded. Just a nice touch.&lt;/p&gt;
&lt;p&gt;Then, we get to our &lt;code&gt;close&lt;/code&gt; function that we use on the markup. Every Stimulus controller has access to the respective DOM element where it&#39;s being used. That &lt;code&gt;data-controller&lt;/code&gt; attribute takes care of that. When we use &lt;code&gt;this.element&lt;/code&gt; we are reaching for that DOM piece, then we can just call &lt;code&gt;.remove&lt;/code&gt; to delete that from the DOM, making the flash message go away.&lt;/p&gt;
&lt;h2&gt;A fun alternative&lt;/h2&gt;
&lt;p&gt;Remember, pick technologies that make your team happy and productive! In our case, everyone loves React and everyone loves Rails, but it&#39;s refreshing to just go full Rails once in a while and break out of the norm. If you are interested in solving problems more on the server-side, keep tuned, as we are going to talk about &lt;a href=&quot;https://github.com/hopsoft/stimulus_reflex&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;StimulusReflex&lt;/a&gt; for Rails and also &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;LiveView&lt;/a&gt; for Phoenix.&lt;/p&gt;
&lt;p&gt;The modern web is great because you have a ton of choices on how to do things, let&#39;s cheers on that.&lt;/p&gt;

    </content>
  </entry> 
  <entry>
    <title>Reactive Rails applications with StimulusReflex</title>
    <link href="https://jfranciscosousa.com/blog/posts/reactive-rails-applications-with-stimulus-reflex/" />
    <updated>2020-09-29T23:00:00+01:00</updated>
    <id>https://jfranciscosousa.com/blog/posts/reactive-rails-applications-with-stimulus-reflex/</id>
    <content type="html">
      &lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;https://dev.to/finiam/reactive-rails-applications-with-stimulusreflex-48kn&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Finiam&#39;s website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A while ago I made a blog post about the modern web with just Rails (and a few other things). Today I&#39;m going to explore another way of doing awesome things with Rails, in the spirit of the modern, reactive, and real-time, web. Let&#39;s explore StimulusReflex, an extension to the amazing library made by Basecamp, to make server-side reactive applications.&lt;/p&gt;
&lt;h2&gt;So what is this Stimulus Reflex thing?&lt;/h2&gt;
&lt;p&gt;StimulusReflex is a Rails library that allows developers to make reactive, real-time apps easily. Much like &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Phoenix LiveView&lt;/a&gt; on Elixir land, this library gives us tools to make reactive UIs running mostly on the server-side.&lt;/p&gt;
&lt;p&gt;It uses ActionCable, and their own CableReady extension, to trigger DOM updates from the server-side. It uses WebSockets, so it&#39;s faster than using regular HTTP requests with say, Turbolinks, or just consuming a regular API. Imagine kinda like Turbolinks, but sending HTML via WebSockets, instead of regular requests.&lt;/p&gt;
&lt;p&gt;StimulusReflex adds the ability to write &lt;strong&gt;reflexes&lt;/strong&gt;. Pieces of code that execute asynchronously and trigger a DOM update. Imagine a React component and some callback that triggers a &lt;code&gt;setState&lt;/code&gt; call. These reflexes are fully server-side, so you can read directly from the database and do all kinds of things you would do on a typical Rails controller. You then attach DOM events to these reflexes with &lt;code&gt;data&lt;/code&gt; attributes, kinda like Stimulus. You can also call these reflexes from Stimulus controllers directly.&lt;/p&gt;
&lt;p&gt;Let&#39;s dive right into the action. Imagine a view that renders a group of &lt;code&gt;todo&lt;/code&gt; records. Then we want each todo to have a delete button that removes that todo without refreshing the webpage.&lt;/p&gt;
&lt;p&gt;Here is the controller:
&lt;code&gt;app/controllers/todos_controller.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-rb&quot;&gt;&lt;code class=&quot;language-rb&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TodosController&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ApplicationController&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;index&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token variable&quot;&gt;@todos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;all&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the view:
&lt;code&gt;app/views/todos/index.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-erb&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@todos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;todo&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token attr-name&quot;&gt;data-reflex&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;click-&gt;TodoReflex#delete&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token attr-name&quot;&gt;data-todo_id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Delete&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our reflex becomes:
&lt;code&gt;app/reflexes/todo_reflex.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-rb&quot;&gt;&lt;code class=&quot;language-rb&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TodoReflex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ApplicationReflex&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    todo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:todo_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destroy&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You use the &lt;code&gt;element&lt;/code&gt; variable, available on all reflexes, to get the DOM element where we define our &lt;code&gt;data-reflex&lt;/code&gt; (our button). Then we get our &lt;code&gt;data-todo_id&lt;/code&gt; from it.&lt;/p&gt;
&lt;p&gt;We then find the todo on the database and delete it. When the method returns, StimulusReflex uses the current controller action to re-render the page with the new info. Then, the new HTML is sent via WebSockets and merged with the previous DOM contents.&lt;/p&gt;
&lt;p&gt;You could replace this functionality with a simple &lt;code&gt;remote: true&lt;/code&gt; Rails form, but as this is submitted with Websockets, the UI update is much faster and gives user&#39;s faster feedback, making the app feel snappier.&lt;/p&gt;
&lt;h2&gt;How the magic happens&lt;/h2&gt;
&lt;p&gt;As I said earlier, StimulusReflex uses CableReady to trigger DOM updates from the server-side. It&#39;s a library developed by the same authors, and you can use it to do some more low-level stuff. It essentially sends DOM instructions through ActionCable, which is a WebSocket library built into Rails.&lt;/p&gt;
&lt;p&gt;The magic happens in those reflex classes. When you trigger a reflex, StimulusReflex essentially rebuilds the current page, calling your controller action again, and it sends that new HTML via the ActionCable socket. Then, the client-side StimulusReflex library morphs the updated DOM with &lt;a href=&quot;https://github.com/patrick-steele-idem/morphdom&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;morphdom&lt;/a&gt;. By default, it updates the entire page, but you can reduce the scope of the updates manually to increase performance, check &lt;a href=&quot;https://docs.stimulusreflex.com/morph-modes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;their docs&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;This is a very quick primer on this amazing library. &lt;a href=&quot;https://docs.stimulusreflex.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Their docs&lt;/a&gt; explain all of this in detail, plus some advanced use cases. It also contains all the instructions to deploy this to production without slowing down the entire application!&lt;/p&gt;
&lt;h2&gt;The classic todo app&lt;/h2&gt;
&lt;p&gt;So let&#39;s revisit that example I showed you earlier. That example called reflexes directly on the markup. It&#39;s a quick way of doing it, but the best way is through a Stimulus controller itself. It gives you more control, allowing you to do cooler things.&lt;/p&gt;
&lt;p&gt;The objective here is to make a simple todo list that allows you to create and delete todos. We are doing this entirely on &lt;code&gt;StimulusRefex&lt;/code&gt; to achieve instant feedback without any full-page refreshes whatsoever. So, the only thing our Rails controller does is rendering the page.&lt;/p&gt;
&lt;p&gt;By the way, I&#39;m assuming you already made the Stimulus and StimulusReflex setup steps, and that you have a model and associated database migration, for a &lt;code&gt;Todo&lt;/code&gt; with a &lt;code&gt;description&lt;/code&gt; text field.&lt;/p&gt;
&lt;p&gt;So, our markup:
&lt;code&gt;app/views/todos/index.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-erb&quot;&gt;&lt;code class=&quot;language-erb&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Todos&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-controller&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@todos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;todo&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Todos-row&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Todos-delete&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token attr-name&quot;&gt;data-action&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;click-&gt;todo#delete&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token attr-name&quot;&gt;data-todo_id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Delete&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; form_with id&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;todo-form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        model&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;@todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Todos-row&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;          action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;submit-&gt;todo#create&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;f&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text_field &lt;span class=&quot;token symbol&quot;&gt;:description&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%=&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;submit &lt;span class=&quot;token string&quot;&gt;&quot;Add todo&quot;&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token erb language-erb&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important here is the &lt;code&gt;data&lt;/code&gt; attributes. Firstly, we annotate the top-level &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;data-controller=&amp;quot;todo&amp;quot;&lt;/code&gt; which tells Stimulus that it should attach the &lt;code&gt;todo_controller.js&lt;/code&gt; to this markup. Then we just define two actions. &lt;code&gt;click-&amp;gt;todo#delete&lt;/code&gt; on the button, to delete todos, and &lt;code&gt;submit-&amp;gt;todo#create&lt;/code&gt; to submit the form and create todos. Notice that on the delete button we also set &lt;code&gt;data-todo_id=&amp;quot;&amp;lt;%= todo.id %&amp;gt;&amp;quot;&lt;/code&gt; to so the reflex knows what todo it should delete.&lt;/p&gt;
&lt;p&gt;Now, our Stimulus controller:
&lt;code&gt;app/javascript/controllers/todo_controller.js&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ApplicationController &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./application_controller&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TodoController&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;showLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stimulate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Todo#delete&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTarget&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hideLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; form &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTarget&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;showLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stimulate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Todo#create&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentTarget&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hideLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    form&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;showLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;wait&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;hideLoading&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;wait&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can see the StimulusReflex &lt;code&gt;stimulate&lt;/code&gt; method. It allows you to call reflexes from Stimulus controllers. We pass the &lt;code&gt;event.currentTarget&lt;/code&gt; so our reflexes have access to the DOM element where the event handler was specified (the button and the form).&lt;/p&gt;
&lt;p&gt;We also have two methods to show a little loading spinner! The &lt;code&gt;stimulate&lt;/code&gt; method returns a promise, so you can do things before and after and keep everything in sync. We also &lt;code&gt;reset&lt;/code&gt; the form after submitting it, which doesn&#39;t happen automatically because we are canceling the default events so we don&#39;t submit a real &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;
&lt;p&gt;Finally, our reflex:
&lt;code&gt;app/reflexes/todo_reflex.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-rb&quot;&gt;&lt;code class=&quot;language-rb&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TodoReflex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ApplicationReflex&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token constant&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;create&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;todo_params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    todo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;todo_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destroy&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt;&lt;br&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;todo_params&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:todo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;permit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &lt;code&gt;delete&lt;/code&gt; function remains unchanged, but notice the cool thing about the &lt;code&gt;create&lt;/code&gt;. Because the DOM element that triggered the event is a form, we can use the classic Rails param mechanisms, so the code looks like a classic Rails controller.&lt;/p&gt;
&lt;p&gt;This is everything you need to render a list of todos and also delete and create them as you wish. The styling with CSS is not part of this blog post scope, I&#39;ll leave that up to you.&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;The basic setup of StimulusReflex won&#39;t cut it for most Rails apps. They have an &lt;a href=&quot;https://docs.stimulusreflex.com/authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;authentication&lt;/a&gt; and a &lt;a href=&quot;https://docs.stimulusreflex.com/deployment&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;deployment&lt;/a&gt; section on their docs that explain the major caveats.&lt;/p&gt;
&lt;p&gt;But, in short, if your app has authentication, you need to identify each ActionCable connection with the currently logged in user, otherwise, the users will see each other&#39;s updates because they will all share the same socket.&lt;/p&gt;
&lt;p&gt;Also, you need to configure your app to use Redis as a cache on a production environment. I recommend doing this in all environments. It&#39;s a good practice for your dev environment to be as similar as possible to your production environment.&lt;/p&gt;
&lt;p&gt;Finally, if you are worried about Rails&#39; ability to scale, just use &lt;a href=&quot;https://anycable.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AnyCable&lt;/a&gt;. It boosts Rails&#39; ActionCable by delegating socket management to a piece of software written in Go which is miles better than Ruby for this workload. Rough benchmarks show that a Rails instance with ActionCable might handle 4000 connections while a single AnyCable node might handle 10000.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;There you go, another cool way of making reactive interfaces without SPAs. It&#39;s a very nice manner of adding bits of reactivity to existing Rails&#39; apps.&lt;/p&gt;
&lt;p&gt;We are using it for internal projects, trying to add some interactivity on some classic Rails apps.&lt;/p&gt;
&lt;p&gt;I hope this has been useful in some way, it&#39;s not a detailed tutorial but more of a showcase of another interesting out-of-the-box technology. If you are interested in this sort of thing (alternatives to SPAs) but are afraid of jumping into Ruby because of performance concerns (an overrated concern), checkout &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_view&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Phoenix LiveView&lt;/a&gt;. It&#39;s written in Elixir, which runs on the BEAM. Performance will not be a problem whatsoever, and... we might have a blog post coming about that soon ;)&lt;/p&gt;

    </content>
  </entry>
</feed>
